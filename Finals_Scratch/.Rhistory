numero <-as.integer(readline(prompt="Prime or Not? Enter the integer."))
isPrime <- function(n) {
m<-ceiling(sqrt(n))
if(n==1) {return(FALSE)}
else if(n==2|n==3) {return(TRUE)}
else if(n>3) {
while(m>=2&&(n/m)-trunc(n/m)!=0){
return(TRUE)
m=m-1
}
}
}
isPrime(numero)
numero <-as.integer(readline(prompt="Prime or Not? Enter the integer."))
isPrime <- function(n) {
m<-ceiling(sqrt(n))
if(n==1) {return(FALSE)}
else if(n==2|n==3) {return(TRUE)}
else if(n>3) {
while(m>=2&&(n/m)-trunc(n/m)!=0){
return(TRUE)
m=m-1
} else {return(FALSE)}
}
}
isPrime(numero)
isPrime(4)
isPrime(1)
isPrime(2)
isPrime(3)
isPrime(4)
isPrime(4)
numero <-as.integer(readline(prompt="Prime or Not? Enter the integer."))
isPrime <- function(n) {
m<-ceiling(sqrt(n))
if(n==1) {return(FALSE)}
else if(n==2|n==3) {return(TRUE)}
else if(n>3) {
while(m>=2&&(n/m)-trunc(n/m)!=0){
return(TRUE)
m=m-1
} else {return(FALSE)}
}
}
isPrime(numero)
isPrime(3)
isPrime(4)
numero <-as.integer(readline(prompt="Prime or Not? Enter the integer."))
isPrime <- function(n) {
m<-ceiling(sqrt(n))
if(n==1) {return(FALSE)}
else if(n==2|n==3) {return(TRUE)}
else if(n>3) {
while(m>=2){
if((n/m)-trunc(n/m)!=0)
check <- list.append("T")
else check <- list.append("F")
return(check)
}
}
}
isPrime(numero)
isPrime(1)
isPrime(2)
isPrime(3)
isPrime(4)
numero <-as.integer(readline(prompt="Prime or Not? Enter the integer."))
isPrime <- function(n) {
m<-ceiling(sqrt(n))
if(n==1) {return(FALSE)}
else if(n==2|n==3) {return(TRUE)}
else if(n>3) {
while(m>=2){
if((n/m)-trunc(n/m)!=0)
check <- list.append("T")
else check <- list.append("F")
}
}
}
isPrime(numero)
isPrime(4)
isPrime <- function(n) {
m<-ceiling(sqrt(n))
if(n==1) {return(FALSE)}
else if(n==2|n==3) {return(TRUE)}
else if(n>3) {
return((n/m)-trunc(n/m)=0&&m>=2)
m=m-1
}
}
isPrime(numero)
isPrime(1)
isPrime(2)
isPrime(3)
isPrime(4)
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')1
source('~/anotherscratch.R')1
source('~/anotherscratch.R')1
source('~/anotherscratch.R')
source('~/anotherscratch.R')
source('~/anotherscratch.R')
numericvector <- c(3,33,25,46,12,8,9,1,2)
charactervector <- c("Luke Skywalker","Han Solo", "Chewbacca", "Darth Vader", "Princess Leia", "Obi Wan Kenobi")
SortingHatChenes <- function(x){
n<-length(x)
for(j in 1:(n-1)){
for(i in 1:(n-j)){
if(x[i]>x[i+1]){
temp<-x[i]
x[i]<-x[i+1]
x[i+1]<-temp
}
}
}
return(x)
}
numberoutput <- SortingHatChenes(numericvector)
print(numberoutput)
charoutput <- SortingHatChenes(charactervector)
print(charactervector)
source('~/anotherscratch.R')
dim(testdata2)
ncol(testdata2)
testdata2
testdata3 <- matrix(1:20,nrow=5,ncol=5)
testdata3
source('~/ScratchniBes.R')
source('~/ScratchniBes.R')
source('~/ScratchniBes.R')
source('~/ScratchniBes.R')
source('~/ScratchniBes.R')
source('~/ScratchniBes.R')
source('~/ScratchniBes.R')
source('~/ScratchniBes.R')
inputtest<-as.numeric(readline(prompt="Gimme your factorial!"))
FactorialFun <- function(x) {
if (x == 1) {
x=1
} else {
return(x*FactorialFun(x-1));
}
}
print(FactorialFun(inputtest))
FactorialFun <- function(x) {
if (x == 1) {
x=1
} else {
return(x*FactorialFun(x-1));
}
}
print(FactorialFun(inputtest))
inputtest<-as.numeric(readline(prompt="Gimme your factorial!"))
FactorialFun <- function(x) {
if (x==1) {
x=1
} else {
return(x*FactorialFun(x-1));
}
}
print(FactorialFun(inputtest))
print(FactorialFun(7))
print(FactorialFun(4))
testdata3 <-matrix(1:25,nrow=5,ncol=5)
testdata3[2,1]=-1
testdata3[2,2]=2
testdata3[2,3]=-1
testdata3[2,4]=2
testdata3[3,1]=4
testdata3[3,2]=-4
testdata3[3,3]=1
testdata3[3,4]=0
testdata3[4,1]=34
testdata3[4,2]=1
det(testdata3)
det(testdata3)
detrmntgeneral(testdata3)
install.packages("rmarkdown")
library(swirl)
rm(list=ls())
#Create a function that accepts a vector and and integer n and returns nth highest number
numericvector <- c(3,33,25,46,12,8,9,1,2)
NthHighestNumber <- function(x,y) {
nth(x,y)
}
NthHighestNumber(numericvector,4)
NthHighestNumber <- function(x,y) {
sort(x,y)
}
NthHighestNumber(numericvector,4)
NthHighestNumber <- function(x,y) {
sort(x,y)
}
NthHighestNumber(numericvector,4)
numericvector <- c(3,33,25,46,12,8,9,1,2)
NthHighestNumber <- function(x,y) {
sort(x,y)
}
NthHighestNumber(numericvector,partial=y)[y]
numericvector <- c(3,33,25,46,12,8,9,1,2)
NthHighestNumber <- function(x,y) {
sort(x,partial=y)[y]
}
NthHighestNumber(numericvector,4)
NthHighestNumber <- function(x,y) {
-sort(x)
x[y]
}
NthHighestNumber(numericvector,4)
numericvector <- c(3,33,25,46,12,8,9,1,2)
NthHighestNumber <- function(x,y) {
x<--sort(x)
element<-x[y]
return(element)
}
NthHighestNumber(numericvector,4)
numericvector <- c(3,33,25,46,12,8,9,1,2)
NthHighestNumber <- function(x,y) {
x<--sort(x,decreasing=TRUE)
element<-x[y]
return(element)
}
NthHighestNumber(numericvector,4)
#Create a function that accepts a vector and and integer n and returns nth highest number
numericvector <- c(3,33,25,46,12,8,9,1,2)
NthHighestNumber <- function(x,y) {
x<-sort(x,decreasing=TRUE)
element<-x[y]
return(element)
}
NthHighestNumber(numericvector,4)
NthHighestNumber(numericvector,2)
library(datasets)
data(cars)
with(cars, plot(speed,dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(ggplot2)
install.packages("ggplot2")
getwd()
setwd()
setwd(./RProgGlobal)
ls
ls()
list=ls()
getwd()
setwd("Users/helenmarylabao-barrameda/RProgGlobal")
setwd("Users/helenmarylabao-barrameda/RProgGlobal")
?download.file
library(swirl)
swirl()
ls
install.packages("swirl")
install.packages("swirl")
load("~/RProgGlobal/.RData")
library(swirl)
ls()
rm(list=ls())
siwlr()
swirl()
swirl()
x <- c(44,NA,5, NA)
3*x
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_data)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (1:20, nrow=4,ncol=5)
my_matrix2 <- (1:20, nrow=4, ncol=5)
my_matrix2 <- (data=1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE |
| c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My
| first function!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor-11,num=5)
remainder(divisor=11,num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(x[1],c(8,4,0))
evaluate(x[1],x=c(8,4,0))
evaluate(x[1],c(8,4,0)
)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x{x[3]},c(8,4,0)))
evaluate(function(x){x[3]},c(8,4,0)))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("Helen", "You can do this")
submit()
submit()
submit()
submit()
submit()
submit()
skip()
mad_libs(Caloocan, pretty, man)
mad_libs("Caloocan", "pretty", "man")
skip()
skip()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply()
cls_vect <-sapply(class,flags)
cls_vect <-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flags_color,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flag$population, flag$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmasses,summary)
tapply(flags$population,flags$landmass,summary)
bye()
swirl::install_course("Getting and Cleaning Data")
swirl::install_course("Exploratory Data Analysis")
?curve
curve(x^3-2*x-5*x+6,-1,2)
curve(x^3-2*x-5*x+6,-1,2)
curve(x^2,-4,4)
?curve
curve(4-x^2,2,4)
curve(4-x^2,-4,4)
ls
ls()
load("~/RProgGlobal/.RData")
ls()
getwd()
setwd("~/RProgGlobal/cfora/maba_computingforanalytics/Finals_Scratch")
ls()
mood<-read.csv('BulletJournalData.csv')
# show the structure of the dataset
head(mood)
mood<-read.csv('BulletJournalData.csv')
macbook<-read.csv('FinalExamData_Barrameda_raw.csv')
# show the structure of the dataset
head(mood)
head(macbook)
getwd()
save.image("~/RProgGlobal/cfora/maba_computingforanalytics/Finals_Scratch/FinalsEnv.RData")
ls
mood<-read.csv('BulletJournalData.csv')
# show the structure of the dataset
head(mood)
macbook<-read.csv('FinalExamData_Barrameda_raw.csv')
head(macbook)
macbook<-read.csv('FinalExamData_Barrameda_raw.csv')
head(macbook)
mood<-read.csv('BulletJournalData.csv')
macbook<-read.csv('FinalExamData_Barrameda_raw.csv')
head(mood)
head(macbook)
?lm
summary(macbook)
summary(mood)
class(macbook)
class(mood)
attr(macbook)
names(macbook)
colnames(macbook)
topprojects<- group_by(macbook,Project)
topprojects
# Which projects got the most time?
#Bar chart
topprojects<- group_by(macbook,Project)
library(dplyr)
update.package("glue")
update.package(glue)
update.packages(glue)
update.packages("glue")
